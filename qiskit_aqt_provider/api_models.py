# generated by datamodel-codegen:
#   filename:  aqt_public.yml

from __future__ import annotations

from enum import Enum
from typing import List, Literal, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Extra, Field


class Circuit(BaseModel):
    class Config:
        allow_mutation = False

    __root__: List[OperationModel] = Field(
        ...,
        description="Json encoding of a quantum circuit.",
        example=[
            {"operation": "RZ", "phi": 0.5, "qubit": 0},
            {"operation": "R", "phi": 0.25, "qubit": 1, "theta": 0.5},
            {"operation": "RXX", "qubits": [0, 1], "theta": 0.5},
            {"operation": "MEASURE"},
        ],
        max_items=10000,
        min_items=1,
        title="Circuit",
    )


class GateR(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_mutation = False

    operation: Literal["R"] = Field(..., title="Operation")
    phi: float = Field(..., ge=0.0, le=2.0, title="Phi")
    qubit: int = Field(..., ge=0, title="Qubit")
    theta: float = Field(..., ge=0.0, le=1.0, title="Theta")


class GateRXX(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_mutation = False

    operation: Literal["RXX"] = Field(..., title="Operation")
    qubits: List[Qubit] = Field(..., max_items=2, min_items=2, title="Qubits", unique_items=True)
    theta: float = Field(..., ge=0.0, le=0.0, title="Theta")


class GateRZ(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_mutation = False

    operation: Literal["RZ"] = Field(..., title="Operation")
    phi: float = Field(..., title="Phi")
    qubit: int = Field(..., ge=0, title="Qubit")


class HTTPValidationError(BaseModel):
    class Config:
        allow_mutation = False

    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class JobResponseRRCancelled(BaseModel):
    class Config:
        allow_mutation = False

    job: JobUser
    response: RRCancelled


class JobResponseRRError(BaseModel):
    class Config:
        allow_mutation = False

    job: JobUser
    response: RRError


class JobResponseRRFinished(BaseModel):
    class Config:
        allow_mutation = False

    job: JobUser
    response: RRFinished


class JobResponseRROngoing(BaseModel):
    class Config:
        allow_mutation = False

    job: JobUser
    response: RROngoing


class JobResponseRRQueued(BaseModel):
    class Config:
        allow_mutation = False

    job: JobUser
    response: RRQueued


class JobSubmission(BaseModel):
    class Config:
        allow_mutation = False

    job_type: Literal["quantum_circuit"] = Field("quantum_circuit", title="Job Type")
    label: Optional[str] = Field(None, title="Label")
    payload: QuantumCircuit


class JobUser(BaseModel):
    class Config:
        allow_mutation = False

    job_id: UUID = Field(
        ...,
        description="Id that uniquely identifies the job. This is used to request results.",
        title="Job Id",
    )
    job_type: Literal["quantum_circuit"] = Field("quantum_circuit", title="Job Type")
    label: Optional[str] = Field(None, title="Label")
    resource_id: str = Field("", title="Resource Id")
    workspace_id: str = Field("", title="Workspace Id")


class Measure(BaseModel):
    class Config:
        extra = Extra.forbid
        allow_mutation = False

    operation: Literal["MEASURE"] = Field(..., title="Operation")


class OperationModel(BaseModel):
    class Config:
        allow_mutation = False

    __root__: Union[GateRZ, GateR, GateRXX, Measure] = Field(
        ...,
        description=(
            "Model for the items in a Circuit.\n\nThis extra wrapper is introduced to leverage the"
            " pydantic\ntagged-union parser."
        ),
        discriminator="operation",
        title="OperationModel",
    )


class QuantumCircuit(BaseModel):
    class Config:
        allow_mutation = False

    number_of_qubits: int = Field(..., gt=0, title="Number Of Qubits")
    quantum_circuit: Circuit
    repetitions: int = Field(..., gt=0, title="Repetitions")


class Qubit(BaseModel):
    class Config:
        allow_mutation = False

    __root__: int = Field(..., ge=0)


class RRCancelled(BaseModel):
    class Config:
        allow_mutation = False

    status: Literal["cancelled"] = Field("cancelled", title="Status")


class RRError(BaseModel):
    class Config:
        allow_mutation = False

    message: str = Field(..., title="Message")
    status: Literal["error"] = Field("error", title="Status")


class RRFinished(BaseModel):
    class Config:
        allow_mutation = False

    result: List[List[ResultItem]] = Field(..., title="Result")
    status: Literal["finished"] = Field("finished", title="Status")


class RROngoing(BaseModel):
    class Config:
        allow_mutation = False

    status: Literal["ongoing"] = Field("ongoing", title="Status")


class RRQueued(BaseModel):
    class Config:
        allow_mutation = False

    status: Literal["queued"] = Field("queued", title="Status")


class Resource(BaseModel):
    class Config:
        allow_mutation = False

    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")
    type: Type = Field(..., title="Type")


class ResultItem(BaseModel):
    class Config:
        allow_mutation = False

    __root__: int = Field(..., ge=0, le=1)


class ResultResponse(BaseModel):
    class Config:
        allow_mutation = False

    __root__: Union[
        JobResponseRRQueued,
        JobResponseRROngoing,
        JobResponseRRFinished,
        JobResponseRRError,
        JobResponseRRCancelled,
        UnknownJob,
    ] = Field(
        ...,
        examples={
            "cancelled": {
                "description": (
                    "Job that has been cancelled by the user, before it could be processed by the"
                    " Quantum computer"
                ),
                "summary": "Cancelled Job",
                "value": {
                    "job": {
                        "job_id": "ccaa39de-d0f3-4c8b-bdb1-4d74f0c2f450",
                        "job_type": "quantum_circuit",
                        "label": "Example computation",
                        "resource_id": "",
                        "workspace_id": "",
                    },
                    "response": {"status": "cancelled"},
                },
            },
            "error": {
                "description": (
                    "Job that created an error while being processed by the Quantum computer"
                ),
                "summary": "Failed Job",
                "value": {
                    "job": {
                        "job_id": "ccaa39de-d0f3-4c8b-bdb1-4d74f0c2f450",
                        "job_type": "quantum_circuit",
                        "label": "Example computation",
                        "resource_id": "",
                        "workspace_id": "",
                    },
                    "response": {"message": "detailed error message", "status": "error"},
                },
            },
            "finished": {
                "description": (
                    "Job that has been successfully processed by a quantum computer or simulator"
                ),
                "summary": "Finished Job",
                "value": {
                    "job": {
                        "job_id": "ccaa39de-d0f3-4c8b-bdb1-4d74f0c2f450",
                        "job_type": "quantum_circuit",
                        "label": "Example computation",
                        "resource_id": "",
                        "workspace_id": "",
                    },
                    "response": {
                        "result": [[1, 0, 0], [1, 1, 0], [0, 0, 0], [1, 1, 0], [1, 1, 0]],
                        "status": "finished",
                    },
                },
            },
            "ongoing": {
                "description": "Job that is currently being processed by the Quantum computer",
                "summary": "Ongoing Job",
                "value": {
                    "job": {
                        "job_id": "ccaa39de-d0f3-4c8b-bdb1-4d74f0c2f450",
                        "job_type": "quantum_circuit",
                        "label": "Example computation",
                        "resource_id": "",
                        "workspace_id": "",
                    },
                    "response": {"status": "ongoing"},
                },
            },
            "queued": {
                "description": "Job waiting in the queue to be picked up by the Quantum computer",
                "summary": "Queued Job",
                "value": {
                    "job": {
                        "job_id": "ccaa39de-d0f3-4c8b-bdb1-4d74f0c2f450",
                        "job_type": "quantum_circuit",
                        "label": "Example computation",
                        "resource_id": "",
                        "workspace_id": "",
                    },
                    "response": {"status": "cancelled"},
                },
            },
            "unknown": {
                "description": "The supplied job id could not be found",
                "summary": "Unknown Job",
                "value": {
                    "job_id": "3aa8b827-4ff0-4a36-b1a6-f9ff6dee59ce",
                    "message": "unknown job_id",
                },
            },
        },
        title="ResultResponse",
    )


class Type(Enum):
    simulator = "simulator"
    device = "device"


class UnknownJob(BaseModel):
    class Config:
        allow_mutation = False

    job_id: UUID = Field(..., title="Job Id")
    message: Literal["unknown job_id"] = Field("unknown job_id", title="Message")


class ValidationError(BaseModel):
    class Config:
        allow_mutation = False

    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class Workspace(BaseModel):
    class Config:
        allow_mutation = False

    id: str = Field(..., title="Id")
    resources: List[Resource] = Field(..., title="Resources")
