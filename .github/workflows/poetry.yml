name: Tests
on:
  push:
    branches: [ master, 'stable/*' ]
  pull_request:
    branches: [ master, 'stable/*' ]
jobs:
  tests:
    name: tests-python${{ matrix.python-version }}-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # TODO: restore full test matrix before merging into public repository
        # python-version: [3.7, 3.8, 3.9, '3.10']
        # os: ["macOS-latest", "ubuntu-latest", "windows-latest"]
        python-version: [3.8, '3.10']
        poetry-version: [1.4.1]
        os: ["ubuntu-latest"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Check Poetry lock file status
        run: poetry lock --check
      - name: Check shell scripts
        uses: ludeeus/action-shellcheck@2.0.0
      - name: Install main dependencies
        run: |
          poetry run pip install coverage[toml]
          poetry install --only main --extras examples
      - name: Run examples
        run: |
          poetry run examples/run_all.sh -c
      - name: Install all dependencies
        run: poetry install --all-extras --sync
      - name: Check formatting
        run: poetry run poe format_check
      - name: Linting
        run: poetry run poe pylint
      - name: Type checking
        run: poetry run poe mypy
      - name: Testing
        run: poetry run poe test --cov_opts="-a"  # add to examples coverage
      - name: Docs
        run: poetry run poe docs
      - name: Generate HTML coverage report
        run: poetry run coverage html
      - name: Upload HTML coverage report
        uses: actions/upload-artifact@v3
        with:
          name: html-coverage
          path: htmlcov/
      - name: Generate XML coverage report
        run: poetry run coverage xml -o coverage.xml
      - name: Read global coverage target
        id: coverage-target
        run: echo "fail-under=$(poetry run python scripts/read-target-coverage.py)" >> $GITHUB_OUTPUT
      - name: Post coverage comment
        if: ${{ github.event_name == 'pull_request' }}
        uses: orgoro/coverage@v3
        with:
          coverageFile: coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          thresholdAll: ${{ steps.coverage-target.outputs.fail-under }}
          thresholdNew: 0
          thresholdModified: 0
